# https://docs.docker.com/go/compose-spec-reference/

# For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

services:
  redis:
    image: redis:latest
    hostname: redis

  web:
    build:
      context: .
      dockerfile: Dockerfile
    hostname: web
    ports:
      - 8000:8000

#Docker magic to make librosa work. Thanks to https://stackoverflow.com/questions/56995232/runtimeerror-cannot-cache-function-jaccard-no-locator-available-for-file
# spec:
#   template:
#     spec:
#       priorityClassName: <priority class>
#       containers:
#         - name: playaround
#           image: <image_path>
#           imagePullPolicy: "IfNotPresent"
#           env:
#             - name: NUMBA_CACHE_DIR
#               value: "/misc/numba_cache"


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

